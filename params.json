{"name":"YieldJS","tagline":"A JavaScript library for creating Iterators and Continuation methods for Arrays.","body":"YieldJS\r\n=======\r\n\r\nA JavaScript library for creating Iterators and Continuation methods for Arrays.\r\n\r\nThe Iterator would be a method (<b>getIterator()</b>) that augments the Array data type and would have the following interfaces:\r\n\r\nProperties:\r\n\r\n1. <b>length</b>   : Length of the collection/array that would be iterated.\r\n2. <b>current</b>  : Gives the current element during the course of an iteration.\r\n2. <b>outList</b>  : The output collection/array after iteration.\r\n\r\nMethods:\r\n\r\n1. <b>moveNext</b>  : Attempts to move the iteration pointer to the next element in the list and returns \"<b>true</b>\" if successful. If unsuccessful (primarily because the iteration pointer is at the last element in the list), returns \"<b>false</b>\".\r\n\r\nUsage:\r\n\r\n```javascript\r\nvar x = [1, 2, 3, 4, 5, 6, 7],\r\n    list = x.getIterator();\r\nwhile (list.moveNext() {\r\n    console.log(list.current);\r\n}\r\nconsole.log(continuation.outList);\r\n```\r\n\r\nContinuation Methods:\r\n=====================\r\n\r\nFor creating continuation methods a context object is provided for qualifying methods.\r\nThe context object provides the following attributes for creating various useful functions:\r\n\r\n1. <b>index</b> : Gives the index of the current element in iteration context.\r\n2. <b>current</b> : Gives the current element in iteration context.\r\n3. <b>outList</b> : Gives the cumilative output collection/array till that point of iteration.\r\n\r\nUsage:\r\n\r\n```javascript\r\n//Continuation Methods\r\nfunction unique(context) {\r\n    \"use strict\";\r\n    return (context.outList.indexOf(context.current) < 0) ? context.current : null;\r\n}\r\n\r\nfunction square(context) {\r\n    \"use strict\";\r\n    return (context.current * context.current);\r\n}\r\n\r\nfunction filter(condition) {\r\n    \"use strict\";\r\n    return function (context) {\r\n        return condition(context.current) ? context.current : null;\r\n    };\r\n}\r\n\r\nfunction even(val) {\r\n    \"use strict\";\r\n    return (val % 2 === 0);\r\n}\r\n\r\nfunction skip(count) {\r\n    \"use strict\";\r\n    return function (context) {\r\n        //console.log(this.index.toString() + \" : \" + this.current.toString());\r\n        return ((context.index % (count + 1)) === 0) ? context.current : null;\r\n    };\r\n}\r\n\r\n//Test Harness\r\nvar x = [1, 2, 3, 200, 1, 2, 3, 200],\r\n    continuation = x.getIterator();\r\nwhile (continuation.moveNext(unique, skip(2))) {\r\n    console.log(continuation.current);\r\n}\r\nconsole.log(continuation.outList);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}